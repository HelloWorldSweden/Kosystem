@page "/{RoomId:int}"
@inject IPersonRepository PersonRepository
@inject IRoomRepository RoomRepository
@inject IPersonSession PersonSession

@if (_roomAlert is not null)
{
    <input class="alert-state" id="unknown-room-alert" type="checkbox" @bind="_hideRoomAlert" />
    <div class="alert alert-danger dismissible">
        <span>@_roomAlert</span>
        <label class="btn-close" for="unknown-room-alert">X</label>
    </div>
}

<Kosystem.Components.RoomComponent Room="_room" People="_people.Values" CurrentPerson="_currentPerson"
    OnEnqueue="OnEnqueue"
    OnDequeue="OnDequeue"
/>

@code {
    [Parameter]
    public int RoomId { get; set; }

    private RoomModel? _room;
    private Dictionary<long, PersonModel> _people = new Dictionary<long, PersonModel>();
    private PersonModel? _currentPerson;

    private string? _roomAlert;
    private bool _hideRoomAlert;

    protected override void OnParametersSet()
    {
        _room = RoomRepository.FindRoom(RoomId);

        if (_room is null) {
            return;
        }

        if (PersonSession.TryGetCurrentPerson(out var person)
            && person.RoomId != RoomId)
        {
            _currentPerson = person;
            var result = RoomRepository.AddPersonToRoom(RoomId, _currentPerson.Id);

            if (result is not AddResult.OK and not AddResult.AlreadyAdded)
            {
                _roomAlert = $"Kunde inte lägga till dig i rum #{RoomId:0000}. Okänt fel...";
                _hideRoomAlert = false;
                return;
            }
        }

        if (_room is not null)
        {
            _people = RoomRepository.FindPeopleInRoom(RoomId)
                .ToDictionary(o => o.Id, o => o);
        }
    }

    void RefreshCurrentPerson()
    {
        if (PersonSession.TryGetCurrentPerson(out _currentPerson)) {
            _people[_currentPerson.Id] = _currentPerson;
        }
    }

    void OnEnqueue()
    {
        if (_currentPerson is not null)
        {
            switch (PersonRepository.EnqueuePerson(_currentPerson.Id))
            {
                case AddResult.OK:
                    break;

                case AddResult.AlreadyAdded:
                    _roomAlert = "Du stod redan i kö.";
                    _hideRoomAlert = false;
                    break;

                case AddResult.UnableToAdd:
                    _roomAlert = "Kunde inte ställa dig i kö. Okänt fel...";
                    _hideRoomAlert = false;
                    break;
            }

            RefreshCurrentPerson();
        }
    }

    void OnDequeue()
    {
        if (_currentPerson is not null)
        {
            switch (PersonRepository.DequeuePerson(_currentPerson.Id))
            {
                case RemoveResult.OK:
                    break;

                case RemoveResult.AlreadyRemoved:
                    _roomAlert = "Du stod redan inte i kö.";
                    _hideRoomAlert = false;
                    break;

                case RemoveResult.UnableToRemove:
                    _roomAlert = "Kunde inte ta bort dig ur kö. Okänt fel...";
                    _hideRoomAlert = false;
                    break;
            }

            RefreshCurrentPerson();
        }
    }
}
