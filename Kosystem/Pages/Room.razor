@page "/{RoomId:int}"
@implements IDisposable
@inject IPersonRepository PersonRepository
@inject IRoomRepository RoomRepository
@inject IPersonSession PersonSession
@inject IKosystemEventListener KosystemEvents
@inject EventAwareRepositories EventAwareRepos

@if (_roomAlert is not null)
{
    <input class="alert-state" id="unknown-room-alert" type="checkbox" @bind="_hideRoomAlert" />
    <div class="alert alert-danger dismissible">
        <span>@_roomAlert</span>
        <label class="btn-close" for="unknown-room-alert">X</label>
    </div>
}

<Kosystem.Components.RoomComponent Room="_room" People="_people.Values" CurrentPerson="_currentPerson"
    OnEnqueue="OnEnqueueClick"
    OnDequeue="OnDequeueClick"
/>

@code {
    [Parameter]
    public int RoomId { get; set; }

    private RoomModel? _room;
    private Dictionary<long, PersonModel> _people = new Dictionary<long, PersonModel>();
    private PersonModel? _currentPerson;

    private string? _roomAlert;
    private bool _hideRoomAlert;

    protected override void OnParametersSet()
    {
        _room = RoomRepository.FindRoom(RoomId);

        if (_room is null) {
            return;
        }

        RefreshPeople();

        if (_currentPerson is not null && _currentPerson.RoomId != RoomId)
        {
            var result = RoomRepository.AddPersonToRoom(RoomId, _currentPerson.Id);

            if (result is not AddResult.OK and not AddResult.AlreadyAdded)
            {
                _roomAlert = $"Kunde inte lägga till dig i rum {RoomIdParser.Format(RoomId)}. Okänt fel...";
                _hideRoomAlert = false;
                return;
            }
        }
    }

    private void RefreshPeople()
    {
        if (_room is not null)
        {
            _people = RoomRepository.FindPeopleInRoom(RoomId)
                .ToDictionary(o => o.Id, o => o);
        }

        RefreshCurrentPerson();
    }

    private void RefreshCurrentPerson()
    {
        if (PersonSession.TryGetCurrentPerson(out _currentPerson)) {
            _people[_currentPerson.Id] = _currentPerson;
        }
    }


    protected override void OnInitialized()
    {
        KosystemEvents.Enqueued += OnEnqueueEvent;
        KosystemEvents.Dequeued += OnEnqueueEvent;
    }

    private void OnEnqueueEvent(object? sender, EnqueingEventArgs args)
    {
        if (args.Room.Id != _room?.Id
        || args.Person == _currentPerson)
        {
            return;
        }

        RefreshPeople();
        InvokeAsync(StateHasChanged);
    }


    private void OnEnqueueClick()
    {
        UpdateQueuingWithEvent(TryEnqueue);
    }

    private void OnDequeueClick()
    {
        UpdateQueuingWithEvent(TryDequeue);
    }

    private void UpdateQueuingWithEvent(
        Func<PersonModel, RoomModel, (bool ok, string? err)> update)
    {
        if (_currentPerson is null || _room is null)
        {
            return;
        }

        (_hideRoomAlert, _roomAlert) = update(_currentPerson, _room);
        RefreshCurrentPerson();
    }

    private (bool ok, string? err) TryEnqueue(PersonModel person, RoomModel room)
        => EventAwareRepos.EnqueuePerson(person, room) switch
        {
            AddResult.AlreadyAdded => (false, "Du stod redan i kö."),
            AddResult.OK => (true, null),
            _ => (false, "Kunde inte ställa dig i kö. Okänt fel..."),
        };

    private (bool ok, string? err) TryDequeue(PersonModel person, RoomModel room)
        => EventAwareRepos.DequeuePerson(person, room) switch
        {
            RemoveResult.AlreadyRemoved => (false, "Du stod redan inte i kö."),
            RemoveResult.OK => (true, null),
            _ => (false, "Kunde inte ta bort dig ur kö. Okänt fel..."),
        };

    public void Dispose()
    {
        KosystemEvents.Enqueued -= OnEnqueueEvent;
        KosystemEvents.Dequeued -= OnEnqueueEvent;
    }
}
