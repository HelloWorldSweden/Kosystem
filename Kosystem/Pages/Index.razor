@page "/"
@inject NavigationManager NavigationManager
@inject IPersonSession PersonSession
@inject IRoomRepository RoomRepository
@inject NavigationManager navManager

<h1>Börja köa efter hjälp</h1>

<EditForm Model="model" OnValidSubmit="HandleValidSubmit">
    <LocalizedDataAnnotationsValidator />

    <input class="alert-state" id="unknown-room-alert" type="checkbox" @bind="hideRoomAlert" />
    <div class="alert alert-danger dismissible">
        <span>@roomAlert</span>
        <label class="btn-close" for="unknown-room-alert">X</label>
    </div>

    <div class="row">
        <div class="col sm-4">
            <div class="form-group">
                <label for="roomNumber">@DisplayNameTranslations.JoinRoomViewModel_RoomId</label>
                <InputText class="input-block border-2" id="roomNumber" placeholder="#0000" @bind-Value="model.RoomId" />
                <ValidationMessage For="() => model.RoomId" />
            </div>
        </div>
        <div class="col sm-8">
            <div class="form-group">
                <label for="name">@DisplayNameTranslations.JoinRoomViewModel_Name</label>
                <InputText class="input-block border-3" type="text" id="name" @bind-Value="model.Name" />
                <ValidationMessage For="() => model.Name" />
            </div>
        </div>
    </div>

    <div class="row flex-center">
        <div class="sm-4 col">
            <button class="btn-large border-4" type="submit">
                @if (model.RoomId is not null
                    && previousRoomId.HasValue
                    && RoomIdParser.RoomIdEquals(model.RoomId, previousRoomId.Value))
                {
                    <text>Gå tillbaka till rum</text>
                }
                else
                {
                    <text>Gå med rum</text>
                }
            </button>
        </div>
    </div>
</EditForm>

@code {
    private readonly JoinRoomViewModel model = new JoinRoomViewModel();

    private string? roomAlert;
    private bool hideRoomAlert = true;
    private int? previousRoomId;

    protected override void OnInitialized()
    {
        var currentPerson = PersonSession.TryGetCurrentPerson();
        if (currentPerson is not null)
        {
            model.Name = currentPerson.Name;
            if (currentPerson.IsInRoom)
            {
                model.RoomId = RoomIdParser.Format(currentPerson.RoomId);
                previousRoomId = currentPerson.RoomId;
            }
        }

        if (string.IsNullOrEmpty(model.RoomId))
        {
            var uri = navManager.ToAbsoluteUri(navManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("room", out var roomParams)
                && roomParams.LastOrDefault() is string roomParam)
            {
                if (RoomIdParser.TryParse(roomParam, out var roomId))
                {
                    model.RoomId = RoomIdParser.Format(roomId);
                }
                else
                {
                    model.RoomId = roomParam;
                }
            }
        }
    }

    void HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(model.RoomId) || model.Name is null)
        {
            return;
        }

        if (!RoomIdParser.TryParse(model.RoomId, out var roomId))
        {
            roomAlert = $"Värde '{model.RoomId?.Trim()}' är inte ett giltigt rumsnummer.";
            hideRoomAlert = false;
            return;
        }

        var room = RoomRepository.FindRoom(roomId);
        if (room is null)
        {
            roomAlert = previousRoomId == roomId
                ? $"Rum {RoomIdParser.Format(roomId)} finns inte längre."
                : $"Rum {RoomIdParser.Format(roomId)} finns inte.";
            hideRoomAlert = false;
            return;
        }

        PersonSession.SetCurrentPerson(model.Name);
        NavigationManager.NavigateTo($"/{RoomIdParser.FormatForUrl(roomId)}");
    }
}
