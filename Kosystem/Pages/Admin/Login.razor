@page "/login"
@inject IAuthSetter AuthSetter
@inject Microsoft.Extensions.Options.IOptions<LoginOptions> LoginOptions
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Login> Localizer

<AuthorizeView>
    <NotAuthorized Context="NotAuthorizedContext">
        <h1>@Localizer["Header"]</h1>

        <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
            <LocalizedDataAnnotationsValidator />

            <input class="alert-state" id="invalid-credentials" type="checkbox" @bind="hideInvalidCredentialsAlert" />
            <div class="alert alert-danger dismissible border-2">
                @Localizer["Alert, wrong password"]
                <label class="btn-close" for="invalid-credentials">X</label>
            </div>

            <div class="row flex-center">
                <div class="col sm-6">
                    <div class="form-group">
                        <label for="password">@DisplayNameTranslations.LoginViewModel_Password</label>
                        <InputText class="input-block border-5" type="password" id="password" @bind-Value="model.Password" />
                        <ValidationMessage For="() => model.Password" />
                    </div>
                </div>
            </div>

            <div class="row flex-center">
                <button class="btn-large border-6" type="submit">@Localizer["Submit button"]</button>
            </div>
        </EditForm>

    </NotAuthorized>
    <Authorized>
        <p class="text-muted">
            @Localizer["Redirecting message"]
        </p>
    </Authorized>
</AuthorizeView>

@code {
    private LoginViewModel model = new LoginViewModel();

    private bool hideInvalidCredentialsAlert = true;

    protected override void OnInitialized()
    {
        if (AuthSetter.IsLoggedIn())
        {
            RedirectToAdminPage();
        }
    }

    private void HandleValidSubmit()
    {
        if (model.Password is null)
        {
            return;
        }

        if (model.Password.Equals(LoginOptions.Value.Password))
        {
            AuthSetter.Login();
            RedirectToAdminPage();
        }
        else
        {
            hideInvalidCredentialsAlert = false;
        }
    }

    private void RedirectToAdminPage()
    {
        NavigationManager.NavigateTo("/admin");
    }
}
